# -*- coding: utf-8 -*-
"""(P) Fine Tuning Gemma 2b (I did)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rE8gDHFv_ElTv_eqt9kqzny3oofKZ3UL
"""

!pip install -q transformers
!pip install -q peft
!pip install -q trl
#!pip install torch_xla
!pip install -q accelerate
!pip install -q optimum
!pip install -i https://pypi.org/simple/ bitsandbytes

from transformers import(
    AutoModelForCausalLM,
    AutoTokenizer,
    BitsAndBytesConfig,
    TrainingArguments,
    logging,
    pipeline
)
from peft import LoraConfig, get_peft_model,prepare_model_for_kbit_training
from trl import SFTTrainer
import torch

compute_dtype = getattr(torch, "float16")

quant_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_quant_type="nf4",
    bnb_4bit_compute_dtype=compute_dtype,
    bnb_4bit_use_double_quant=False,
)

model_id = "Lucas-Hyun-Lee/gemma-2b-it-Question-generation-en-sft-qlora"

import os

tokenizer = AutoTokenizer.from_pretrained(model_id,token='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')
model = AutoModelForCausalLM.from_pretrained(
        model_id,
        torch_dtype=torch.bfloat16,
        device_map="auto",
        token='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',
        trust_remote_code=True
    )

# tokenizer = AutoTokenizer.from_pretrained(model_id, token='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')
# model = AutoModelForCausalLM.from_pretrained(model_id, quantization_config=quant_config, device_map={"":0}, token = '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')

model = prepare_model_for_kbit_training(model)

peft_config = LoraConfig(
    lora_alpha=16,
    lora_dropout=0.1,
    r=64,
    bias="none",
    task_type="CAUSAL_LM",
    target_modules=["q_proj", "k_proj", "v_proj", "o_proj","gate_proj"]
)

model_peft = get_peft_model(model, peft_config)

training_arguments = TrainingArguments(
    output_dir="./results",
    num_train_epochs=5,
    per_device_train_batch_size=1,
    gradient_accumulation_steps=1,
    optim="paged_adamw_32bit",
    save_steps=25,
    logging_steps=25,
    learning_rate=2e-4,
    weight_decay=0.001,
    fp16=False,
    bf16=False,
    max_grad_norm=0.3,
    max_steps=-1,
    warmup_ratio=0.03,
    group_by_length=True,
    lr_scheduler_type="constant",
)

import pyarrow as pa
import pyarrow.dataset as ds
import pandas as pd
from datasets import Dataset

df = pd.read_csv(r"/content/Untitled spreadsheet - Sheet1.csv", quotechar='"', escapechar='\\')
df.head()

def merge_column(df):
  return("Berikut ini adalah konteks yang diberikan, buatkanlah 5 pertanyaan dari konteks yang diberikan\n"
          "Pastikan setiap pertanyaan:\n"
          "1. Hanya berfokus pada informasi yang disajikan dalam konteks.\n"
          "2. Menggunakan bahasa yang jelas dan mudah dipahami.\n"
          "3. Tidak menanyakan informasi di luar konteks yang diberikan.\n"
          f"context: {df['Context']}\n\n"
          f"question: {df['Question']}"
          )

df["text"] = df.apply(merge_column,axis=1)

print(df["text"][1])

dataset = ds.dataset(pa.Table.from_pandas(df).to_batches())

### convert to Huggingface dataset
hg_dataset = Dataset(pa.Table.from_pandas(df))

print(hg_dataset)

trainer = SFTTrainer(
    model=model_peft,
    train_dataset=hg_dataset,
    peft_config=peft_config,
    tokenizer=tokenizer,
    args=training_arguments,
)

trainer.train()

"""Save Model"""

new_model = "Lucas-Hyun-Lee/gemma-2b-it-Question-generation-en-sft-qlora-Brb"

trainer.model.save_pretrained(new_model)
trainer.tokenizer.save_pretrained(new_model)

from google.colab import drive
drive.mount('/content/drive')

import shutil
source_folder = '/content/Lucas-Hyun-Lee'  # Path to the folder in Colab
destination_folder = '/content/drive/MyDrive/Gemma2b-FineTuned'  # Path to the destination folder in Drive
shutil.copytree(source_folder, destination_folder)